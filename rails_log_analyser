#!/usr/bin/env ruby

require 'pp'
require 'rubygems'
require 'progressbar'
require 'optparse'

module Rails
  module LogAnalyser
    class Entry
      attr_accessor :process_id, :action, :status, :messages, :time, :time_spent, :time_spent_on_view, :time_spent_on_db

      def initialize(process_id, action, time)
        self.process_id = process_id || 0
        self.action = action
        self.time = time
        self.time_spent = 0
        self.time_spent_on_view = 0
        self.time_spent_on_db = 0
        self.status = "0"
        self.messages = []
      end

      def <<(message)
        self.messages << message if message
      end
    end

    class List
      attr_accessor :transactions, :filter_date

      def initialize(filter_date = nil)
        @current_transactions = {}
        @transactions = []
        @filter_date = filter_date
      end

      def start_transaction(process_id, action, time, message)
        complete_transaction process_id
        @current_transactions[process_id] = Rails::LogAnalyser::Entry.new process_id, action, time
        continue_transaction process_id, message
      end

      def continue_transaction(process_id, line)
        if process_id
          @last_process_id = process_id
        else
          process_id = @last_process_id
        end

        if line =~ /^Completed in (\d+)ms \(View: (\d+), DB: (\d+)\)/ && @current_transactions[process_id]
          @current_transactions[process_id].time_spent = $1.to_i
          @current_transactions[process_id].time_spent_on_view = $2.to_i
          @current_transactions[process_id].time_spent_on_db = $3.to_i
          line =~ /.*?\|\s+(\d+)/
          @current_transactions[process_id].status = $1
        else
          @current_transactions[process_id] << line if @current_transactions[process_id]
        end
      end

      def complete_transaction(process_id)
        @transactions << @current_transactions[process_id] if @current_transactions[process_id]
        @current_transactions[process_id] = nil
      end

      def complete_all_transactions
        @current_transactions.keys.each do |process_id|
          complete_transaction process_id
        end
      end

      def read(filename)
        lines = `wc -l #{filename}`.to_i
        pbar = ProgressBar.new "Analysing", lines

        next_line_is_process_marker = false
        action = ""
        time = ""

        File.open(filename, 'r').each do |line|
          if line =~ /^Processing/ || line =~ /Parameters/ || line =~ /^Completed/
            pbar.inc
            process_id = nil
            message = nil

            if line =~ /\[(\d+)\] (.*)/
              process_id = $1
              message = $2
            end

            # puts "line is: #{line}"

            if next_line_is_process_marker
              # puts "next line is process marker"
              start_transaction process_id, action, time, message
              next_line_is_process_marker = false
            elsif line =~ /Processing ([^ ]+).*\(.*at ([0-9 :-]+)\)/
              # puts "processing line"
              action = $1
              time = $2
              next_line_is_process_marker = true
            else
              # puts "continue transaction"
              continue_transaction process_id, line
            end
          end
        end
        complete_all_transactions
        pbar.finish
      end

      def transactions_filtered_by_date
        @filter_date ? self.transactions.select { |t| t.time.include? @filter_date } : self.transactions
      end

      def collated_stats_by_action
        collated_by_action = {}
        stats = []

        transactions_filtered_by_date.each_with_index do |tran, index|
          collated_by_action[tran.action] = [] unless collated_by_action.has_key?(tran.action)
          collated_by_action[tran.action] << tran
        end

        collated_by_action.each do |key, values|
          total = values.map(&:time_spent).reduce(:+)
          views = values.map(&:time_spent_on_view).reduce(:+)
          db = values.map(&:time_spent_on_db).reduce(:+)
          stats << {:action => key, :total => total, :views => views, :db => db}
        end

        stats.sort { |x,y| y[:total] <=> x[:total] }
      end

    end
  end
end

#--------------------------------------------------------------------------------

options = { :input_path => "production.log", :list => true, :sort => false, :collate => false }

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: ./rails_log_analyser [--sort, --collate, -i ID] [path_to_input_file(s)]"
  opts.on("--no-list", "Don't list the requests") do
    options[:list] = false
  end
  opts.on("--sort", "Sort the requests") do
    options[:sort] = true
  end
  opts.on("--collate", "Collate requests by action") do
    options[:collate] = true
  end
  opts.on("-i", "--request-ids ID,ID,ID...", Array, "Specify a request ID to view, rather than listing") do |d|
    options[:ids] = d.map &:to_i
  end
  opts.on("-d", "--date DATE", String, "Specify a date to filter the logs by in the format yyyy-mm-dd") do |d|
    options[:date] = d
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  options[:input_path] = option_parser.parse!.first # returns anything not handled by the options above - the input filenames.
rescue
  puts $! # print out error
  option_parser.parse('--help') # print out command glossary
end

log = Rails::LogAnalyser::List.new options[:date]
log.read options[:input_path]

if options.has_key?(:ids)
  options[:ids].each do |transaction_id|
    tran = log.transactions[transaction_id]
    puts "%4d : %-40s %14s" % [transaction_id, tran.action, tran.time]
    puts "-" * 62
    puts tran.messages
    puts
  end
else
  relevant_transactions = log.transactions_filtered_by_date
  if options.has_key?(:date)
    puts "Filtering log by date: #{options[:date]}"
    puts "Relevant Transaction count: #{relevant_transactions.count}"
  end
  puts "Total Transaction count: #{log.transactions.count}"
  relevant_transactions.sort! { |a,b| a.time.gsub('ms', '').to_i <=> b.time.gsub('ms', '').to_i } if options[:sort]

  if options[:list]
    relevant_transactions.each_with_index do |tran, index|
      puts "%4d : %-40s %14s (%dms (View: %dms / DB: %dms) %d)" % [index, tran.action, tran.time, tran.time_spent, tran.time_spent_on_view, tran.time_spent_on_db, tran.status]
    end
  end

  if options[:collate]
    log.collated_stats_by_action.each do |s|
      puts "For action #{s[:action]}: Total: #{s[:total]}ms, Views: #{s[:views]}ms, DB: #{s[:db]}ms"
    end
  end
end
